// <auto-generated />
using System;
using API.src.Infra.EntityFramework;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace API.Migrations
{
    [DbContext(typeof(BuildContext))]
    partial class BuildContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.11");

            modelBuilder.Entity("API.Domain.Location.Address", b =>
                {
                    b.Property<int?>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ExtraInfo")
                        .HasColumnType("longtext");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("ID");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("API.Domain.RealState.Models.CondominiumObject", b =>
                {
                    b.Property<int?>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Gym")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("LocationID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("ValuesID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("LocationID");

                    b.HasIndex("ValuesID");

                    b.ToTable("Condominiums");
                });

            modelBuilder.Entity("API.Domain.User.UserObject", b =>
                {
                    b.Property<int?>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Phone")
                        .HasColumnType("longtext");

                    b.HasKey("ID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("API.src.Domain.Announcement.Entities.Announcement", b =>
                {
                    b.Property<int?>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("advertiserID")
                        .HasColumnType("int");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("immediatelyAvailable")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("ID");

                    b.HasIndex("advertiserID");

                    b.ToTable("Announcements");
                });

            modelBuilder.Entity("API.src.Domain.Announcement.Entities.AnnouncementRentType", b =>
                {
                    b.Property<int?>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<float>("IPTU")
                        .HasColumnType("float");

                    b.Property<int?>("announcementID")
                        .HasColumnType("int");

                    b.Property<float>("montlyValue")
                        .HasColumnType("float");

                    b.HasKey("ID");

                    b.HasIndex("announcementID");

                    b.ToTable("AnnouncementsToRent");
                });

            modelBuilder.Entity("API.src.Domain.Announcement.Entities.AnnouncementSellType", b =>
                {
                    b.Property<int?>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<float>("IPTU")
                        .HasColumnType("float");

                    b.Property<float>("Value")
                        .HasColumnType("float");

                    b.Property<int?>("announcementID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("announcementID");

                    b.ToTable("AnnouncementsToSell");
                });

            modelBuilder.Entity("API.src.Domain.Monetary.Entities.RealStateMonetary", b =>
                {
                    b.Property<int?>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double?>("IPTU")
                        .HasColumnType("double");

                    b.Property<double>("montlyValue")
                        .HasColumnType("double");

                    b.HasKey("ID");

                    b.ToTable("RealStateMonetary");
                });

            modelBuilder.Entity("API.src.Domain.RealState.Entities.TypeRealEstate", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("RealEstateTypes");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Description = "",
                            Name = "APARTMENT"
                        },
                        new
                        {
                            Id = 1,
                            Description = "",
                            Name = "HOUSE"
                        },
                        new
                        {
                            Id = 2,
                            Description = "",
                            Name = "KITNET"
                        },
                        new
                        {
                            Id = 3,
                            Description = "",
                            Name = "STUDIO"
                        });
                });

            modelBuilder.Entity("API.src.Domain.RealState.Entities.ValueObject.RealEstateValueObject", b =>
                {
                    b.Property<int?>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("AllowPets")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Bathrooms")
                        .HasColumnType("int");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("Furnished")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Garage")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("RoomWithBathroom")
                        .HasColumnType("int");

                    b.Property<int>("Rooms")
                        .HasColumnType("int");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("ID");

                    b.ToTable("RealEstates");

                    b.HasDiscriminator<string>("Discriminator").HasValue("RealEstateValueObject");
                });

            modelBuilder.Entity("API.src.Domain.Values.CondominiumMonetary", b =>
                {
                    b.Property<int?>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double?>("fireInsurence")
                        .HasColumnType("double");

                    b.Property<double>("montlyValue")
                        .HasColumnType("double");

                    b.Property<double?>("serviceCharge")
                        .HasColumnType("double");

                    b.HasKey("ID");

                    b.ToTable("CondominiumMonetary");
                });

            modelBuilder.Entity("API.src.Domain.Visit.ScheduledVisit", b =>
                {
                    b.Property<int?>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("realStateID")
                        .HasColumnType("int");

                    b.Property<int?>("visitorID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("realStateID");

                    b.HasIndex("visitorID");

                    b.ToTable("ScheduledVisits");
                });

            modelBuilder.Entity("API.src.Domain.RealState.Entities.RealEstateBase", b =>
                {
                    b.HasBaseType("API.src.Domain.RealState.Entities.ValueObject.RealEstateValueObject");

                    b.Property<int?>("AdressID")
                        .HasColumnType("int");

                    b.Property<int?>("CurrentResidentID")
                        .HasColumnType("int");

                    b.Property<int?>("TypeId")
                        .HasColumnType("int");

                    b.Property<int?>("ValuesID")
                        .HasColumnType("int");

                    b.HasIndex("AdressID");

                    b.HasIndex("CurrentResidentID");

                    b.HasIndex("TypeId");

                    b.HasIndex("ValuesID");

                    b.ToTable("RealEstates");

                    b.HasDiscriminator().HasValue("RealEstateBase");
                });

            modelBuilder.Entity("API.src.Domain.RealState.Entities.RealEstateCondo", b =>
                {
                    b.HasBaseType("API.src.Domain.RealState.Entities.RealEstateBase");

                    b.Property<int>("CondominiumID")
                        .HasColumnType("int");

                    b.HasIndex("CondominiumID");

                    b.ToTable("RealEstates");

                    b.HasDiscriminator().HasValue("RealEstateCondo");
                });

            modelBuilder.Entity("API.Domain.RealState.Models.CondominiumObject", b =>
                {
                    b.HasOne("API.Domain.Location.Address", "Location")
                        .WithMany()
                        .HasForeignKey("LocationID");

                    b.HasOne("API.src.Domain.Values.CondominiumMonetary", "Values")
                        .WithMany()
                        .HasForeignKey("ValuesID");

                    b.Navigation("Location");

                    b.Navigation("Values");
                });

            modelBuilder.Entity("API.src.Domain.Announcement.Entities.Announcement", b =>
                {
                    b.HasOne("API.Domain.User.UserObject", "advertiser")
                        .WithMany()
                        .HasForeignKey("advertiserID");

                    b.Navigation("advertiser");
                });

            modelBuilder.Entity("API.src.Domain.Announcement.Entities.AnnouncementRentType", b =>
                {
                    b.HasOne("API.src.Domain.Announcement.Entities.Announcement", "announcement")
                        .WithMany()
                        .HasForeignKey("announcementID");

                    b.Navigation("announcement");
                });

            modelBuilder.Entity("API.src.Domain.Announcement.Entities.AnnouncementSellType", b =>
                {
                    b.HasOne("API.src.Domain.Announcement.Entities.Announcement", "announcement")
                        .WithMany()
                        .HasForeignKey("announcementID");

                    b.Navigation("announcement");
                });

            modelBuilder.Entity("API.src.Domain.Visit.ScheduledVisit", b =>
                {
                    b.HasOne("API.src.Domain.RealState.Entities.RealEstateBase", "realState")
                        .WithMany()
                        .HasForeignKey("realStateID");

                    b.HasOne("API.Domain.User.UserObject", "visitor")
                        .WithMany()
                        .HasForeignKey("visitorID");

                    b.Navigation("realState");

                    b.Navigation("visitor");
                });

            modelBuilder.Entity("API.src.Domain.RealState.Entities.RealEstateBase", b =>
                {
                    b.HasOne("API.Domain.Location.Address", "Adress")
                        .WithMany()
                        .HasForeignKey("AdressID");

                    b.HasOne("API.Domain.User.UserObject", "CurrentResident")
                        .WithMany()
                        .HasForeignKey("CurrentResidentID");

                    b.HasOne("API.src.Domain.RealState.Entities.TypeRealEstate", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId");

                    b.HasOne("API.src.Domain.Monetary.Entities.RealStateMonetary", "Values")
                        .WithMany()
                        .HasForeignKey("ValuesID");

                    b.Navigation("Adress");

                    b.Navigation("CurrentResident");

                    b.Navigation("Type");

                    b.Navigation("Values");
                });

            modelBuilder.Entity("API.src.Domain.RealState.Entities.RealEstateCondo", b =>
                {
                    b.HasOne("API.Domain.RealState.Models.CondominiumObject", "Condominium")
                        .WithMany("realStates")
                        .HasForeignKey("CondominiumID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Condominium");
                });

            modelBuilder.Entity("API.Domain.RealState.Models.CondominiumObject", b =>
                {
                    b.Navigation("realStates");
                });
#pragma warning restore 612, 618
        }
    }
}
